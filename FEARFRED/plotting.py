# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00a_Visualization_Utils.ipynb.

# %% auto 0
__all__ = ['plot_directed_2d', 'plot_flow_field_2d', 'plot_origin_3d', 'plot_directed_3d', 'visualize_graph']

# %% ../nbs/00a_Visualization_Utils.ipynb 3
import torch
import numpy as np
import matplotlib.pyplot as plt
def plot_directed_2d(X, flows, labels=None, mask_prob=0.5, cmap="viridis", ax=None, save = False, use_streamlines = True, title = "", filename = "", equal_aspect_ratio = True, minimal=False,arrow_scale=8):    
    # Plots a set of points with their associated flows
    if type(X) is torch.Tensor:
        X = X.detach().numpy()
    if type(flows) is torch.Tensor:
        flows = flows.detach().numpy()
    if type(labels) is torch.Tensor:
        labels = labels.detach().numpy()
    num_nodes = X.shape[0]
    alpha_points, alpha_arrows = (0.1, 1) if labels is None else (1, 0.1)
    if ax is None:
        fig = plt.figure()
        ax = fig.add_subplot()
    ax.scatter(X[:, 0], X[:, 1], marker=".", c=labels, cmap=cmap, alpha=alpha_points)
    mask = np.random.rand(num_nodes) > mask_prob
    ax.quiver(
        X[mask, 0], 
        X[mask, 1], 
        flows[mask, 0], 
        flows[mask, 1], 
        alpha=alpha_arrows,
        scale=arrow_scale
    )
    if equal_aspect_ratio:
        ax.set_aspect("equal")
    ax.set_aspect("equal")
    ax.set_title(title)
    if minimal:
        ax.axis('off')
    if ax is None:
        plt.show()
    if save:
        plt.savefig(filename)
        plt.close()


# %% ../nbs/00a_Visualization_Utils.ipynb 4
def plot_flow_field_2d(FG, # An instance of the FlowGenerator class
                       n_samples=500, 
                       arrow_scale=8 # size of the arrows in the embedding. A smaller number creates larger arrows.
                      ):
    with torch.no_grad():
        inputs = torch.rand(n_samples,FG.dimension)
        X, flows, features = FG(inputs)
        plot_directed_2d(X,flows,features,arrow_scale=arrow_scale)
        plt.show()
        plt.close()

# %% ../nbs/00a_Visualization_Utils.ipynb 6
def plot_origin_3d(ax, xlim, ylim, zlim):
    ax.plot(xlim, [0, 0], [0, 0], color="k", alpha=0.5)
    ax.plot([0, 0], ylim, [0, 0], color="k", alpha=0.5)
    ax.plot([0, 0], [0, 0], zlim, color="k", alpha=0.5)


def plot_directed_3d(X, flow, labels=None, mask_prob=0.5, cmap="viridis", origin=False, ax=None, save = False, filename = "", plot_minimal = False):
    num_nodes = X.shape[0]
    alpha_points, alpha_arrows = (0.1, 1) if labels is None else (1, 0.1)
    mask = np.random.rand(num_nodes) > mask_prob
    if ax is None:
        fig = plt.figure(dpi=400, figsize=(8,8))
        ax = fig.add_subplot(projection="3d")
    if origin:
        plot_origin_3d(
            ax,
            xlim=[X[:, 0].min(), X[:, 0].max()],
            ylim=[X[:, 1].min(), X[:, 1].max()],
            zlim=[X[:, 2].min(), X[:, 2].max()],
        )
    ax.scatter(X[:, 0], X[:, 1], X[:, 2], marker=".", c=labels, cmap=cmap, alpha=alpha_points, )
    ax.quiver3D(
        X[mask, 0],
        X[mask, 1],
        X[mask, 2],
        flow[mask, 0],
        flow[mask, 1],
        flow[mask, 2],
        alpha=alpha_arrows,
        length=0.5,
        arrow_length_ratio=0.2
    )
    if plot_minimal:
        ax.axis("off")
    # lim = np.max(np.linalg.norm(X, axis=1))
    # print("lim is",lim)
    # ax.axes.set_xlim3d(left=-lim, right=lim)
    # ax.axes.set_ylim3d(bottom=-lim, top=lim)
    # ax.axes.set_zlim3d(bottom=-lim, top=lim)
    if ax is None:
        plt.show()
    if save:
        plt.savefig(filename)
        plt.close()


# %% ../nbs/00a_Visualization_Utils.ipynb 8
import matplotlib.pyplot as plt
import networkx as nx

def visualize_graph(adjacency, is_networkx=False, to_undirected=False, ax=None):
    G = nx.from_numpy_matrix(adjacency)
    pos = nx.spring_layout(G, seed=42)
    if ax is None:
        nx.draw_networkx(
            G, pos=pos, arrowsize=20, node_color="#adade0"
        )
        plt.show()
    else:
        nx.draw_networkx(
            G, pos=pos, arrowsize=20, node_color="#adade0", ax=ax
        )

