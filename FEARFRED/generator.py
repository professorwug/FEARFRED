# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/FlowGenerator.ipynb.

# %% auto 0
__all__ = ['FlowGenerator']

# %% ../nbs/FlowGenerator.ipynb 3
import torch
import torch.nn as nn
import torch.nn.functional as F
class FlowGenerator(nn.Module):
    def __init__(
        self,
        dimension, # intrinsic dimension of the data manifold. Should be estimated prior to applying FEARFRED
        n_features, # features per node
    ):
        self.dimension = dimension
        self.n_features = n_features
        super().__init__()
        # the flow artist creates the vector field
        self.flow_artist_l1 = nn.Linear(self.dimension, 64)
        self.flow_artist_l2 = nn.Linear(64, 64)
        self.flow_artist_l3 = nn.Linear(64, 64)
        self.flow_artist_l4 = nn.Linear(64, 64)
        self.flow_artist_l5 = nn.Linear(64, 64)
        self.flow_artist_l6 = nn.Linear(64, 64)
        self.flow_artist_l7 = nn.Linear(64, 64)
        self.flow_artist_l8 = nn.Linear(64, self.dimension)
        # the flow sampler defines a distribution over the vector field, showing where in the space to sample from
        self.flow_sampler_l1 = nn.Linear(self.dimension, 64)
        self.flow_sampler_l2 = nn.Linear(64, 64)
        self.flow_sampler_l3 = nn.Linear(64, 64)
        self.flow_sampler_l4 = nn.Linear(64, 64)
        self.flow_sampler_l5 = nn.Linear(64, 64)
        self.flow_sampler_l6 = nn.Linear(64, 64)
        self.flow_sampler_l7 = nn.Linear(64, 64)
        self.flow_sampler_l8 = nn.Linear(64, self.dimension)
        # the feature giver assigns features to each point in the embedding space
        self.feature_giver_l1 = nn.Linear(self.dimension, 64)
        self.feature_giver_l2 = nn.Linear(64, 64)
        self.feature_giver_l3 = nn.Linear(64, 64)
        self.feature_giver_l4 = nn.Linear(64, 64)
        self.feature_giver_l5 = nn.Linear(64, 64)
        self.feature_giver_l6 = nn.Linear(64, 64)
        self.feature_giver_l7 = nn.Linear(64, 64)
        self.feature_giver_l8 = nn.Linear(64, self.n_features)
    def flow_artist(self,x):
        # evaluates the vector field at point x
        x = self.flow_artist_l1(x)
        x = F.gelu(x)
        x = self.flow_artist_l2(x)
        x = F.gelu(x)
        x = self.flow_artist_l3(x)
        x = F.gelu(x)
        x = self.flow_artist_l4(x)
        x = F.gelu(x)
        x = self.flow_artist_l5(x)
        x = F.gelu(x)
        x = self.flow_artist_l6(x)
        x = F.gelu(x)
        x = self.flow_artist_l7(x)
        x = F.gelu(x)
        x = self.flow_artist_l8(x)
        return x
    def flow_sampler(self,x):
        # samples from the embedding space. Should be given inputs in [0,1]^n
        x = self.flow_sampler_l1(x)
        x = F.gelu(x)
        x = self.flow_sampler_l2(x)
        x = F.gelu(x)
        x = self.flow_sampler_l3(x)
        x = F.gelu(x)
        x = self.flow_sampler_l4(x)
        x = F.gelu(x)
        x = self.flow_sampler_l5(x)
        x = F.gelu(x)
        x = self.flow_sampler_l6(x)
        x = F.gelu(x)
        x = self.flow_sampler_l7(x)
        x = F.gelu(x)
        x = self.flow_sampler_l8(x)
        return x
    def feature_giver(self,x):
        # samples from the embedding space. Should be given inputs in [0,1]^n
        x = self.feature_giver_l1(x)
        x = F.gelu(x)
        x = self.feature_giver_l2(x)
        x = F.gelu(x)
        x = self.feature_giver_l3(x)
        x = F.gelu(x)
        x = self.feature_giver_l4(x)
        x = F.gelu(x)
        x = self.feature_giver_l5(x)
        x = F.gelu(x)
        x = self.feature_giver_l6(x)
        x = F.gelu(x)
        x = self.feature_giver_l7(x)
        x = F.gelu(x)
        x = self.feature_giver_l8(x)
        return x
    def forward(self,samples):
        points = self.flow_sampler(samples)
        flows = self.flow_artist(points)
        features = self.feature_giver(points)
        return points,flows,features
        

# %% ../nbs/FlowGenerator.ipynb 6
from .plotting import plot_directed_2d, plot_flow_field_2d
