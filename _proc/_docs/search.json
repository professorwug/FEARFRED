[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FEARFRED",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "FEARFRED",
    "section": "Install",
    "text": "Install\npip install FEARFRED"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "FEARFRED",
    "section": "How to use",
    "text": "How to use\nFill me in please! Donâ€™t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "01a graph toy datasets.html",
    "href": "01a graph toy datasets.html",
    "title": "Toy Graph Datasets for FRED",
    "section": "",
    "text": "FRED is, at heart, an embedder of directed graphs. But what types of graphs? This notebook, and those nested under 01a01, contain a battery of toy directed graphs, including: 1. (Directed) Stochastic Block Models 2. Trees 3. Small Random graphs\nThis notebook houses a sampling of these graphs, with details on how to call them and visualize them."
  },
  {
    "objectID": "01a graph toy datasets.html#graph-visualization-tools",
    "href": "01a graph toy datasets.html#graph-visualization-tools",
    "title": "Toy Graph Datasets for FRED",
    "section": "Graph Visualization Tools",
    "text": "Graph Visualization Tools\n\n#! export\n#| hide\nimport matplotlib.pyplot as plt\nimport networkx as nx\nfrom torch_geometric.utils import to_networkx\ndef visualize_graph(data, is_networkx=False, to_undirected=False, ax=None):\n    G = data if is_networkx else to_networkx(data, to_undirected=to_undirected)\n    pos = nx.spring_layout(G, seed=42)\n    if ax is None:\n        nx.draw_networkx(\n            G, pos=pos, arrowsize=20, node_color=\"#adade0\"\n        )\n        plt.show()\n    else:\n        nx.draw_networkx(\n            G, pos=pos, arrowsize=20, node_color=\"#adade0\", ax=ax\n        )"
  },
  {
    "objectID": "01a graph toy datasets.html#add-source-and-sink-communities",
    "href": "01a graph toy datasets.html#add-source-and-sink-communities",
    "title": "Toy Graph Datasets for FRED",
    "section": "Add source and sink communities",
    "text": "Add source and sink communities\nIn a directed graph, a node is a source if it has in-degree of 0, and a node is a sink if it has out-degree of 0. These notions can be generalized into source communities and sink communities (by communities we simply mean a group of nodes in the directed graph). If we think of information on the directed graph as some mass diffusing through random walk, then mass will stay in the sink communities once enter and mass will stay out of the source communities once exit. Then, the existence of source and/or sink communities could imbalancedly affect the measurement of diffusion curvature.\nIn order to assess and possibly correct this effect, we first want to create directed graphs with source and/or sink communities. We will do so by create pretransformation to existing directed graph data so to make all edges connected to some ground-truth communities pointing outwards (for source communities) or inwards (for sink communities).\nWe will be flexible and add a parameter adv_prob to indicate the probability of edges pointing in the wrong direction. This probability should be zero or close to zero.\nThere are two possible way to correct the edges that point in the wrong direction: either by reversing the direction or by removing the edge completely. The probability of employing these methods is specified by the probability remove_prob. This parameter could help mitigate the effect of excessive number of edges pointing out of (into resp.) source (sink resp.) communities.\n\n\nSourceSink\n\n SourceSink (prob_source=0.1, prob_sink=0.1, adv_prob=0, remove_prob=0)\n\nTransform a (directed or undirected) graph into a directed graph with a proportion of the nodes with mostly out-edges and a porportion of the nodes with mostly in-edges\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprob_source\nfloat\n0.1\nmust be between 0 and 1Proportion of nodes/communities to turn into source nodes/communities(with mostly out-edges)\n\n\nprob_sink\nfloat\n0.1\nmust be between 0 and 1prob_source and prob_sink must add up to no more than 1Proportion of nodes/communities to turn into sink nodes/communities(with mostly in-edges)\n\n\nadv_prob\nint\n0\nmust be between 0 and 1Probability of in-edges for source nodes and/or out-edges for sink nodes\n\n\nremove_prob\nint\n0\nmust be between 0 and 1Probability of removing an in-edge for source nodes and/or out-edges for sink nodes1 - remove_prob is the probability of reversing the direction of in-edge for source nodes and/or out-edges for sink nodes\n\n\n\nIt is also possible to create source and sink nodes using the same SourceSink transformation to generate small directed graph with specific characteristic. We will try transforming the graph above into a big cluster of source and a smaller cluster of sinks\n\npre_transform = SourceSink(prob_source=0.6, prob_sink=0.4, adv_prob=0.1, remove_prob=0)\ndataset = SmallRandom(num_nodes=20, prob_edge=0.2, pre_transform=pre_transform)\ndata = dataset[0]\n\n/var/folders/y5/4qfj8yjj1hb97n6q01_dg0km0000gn/T/ipykernel_86112/2928479379.py:88: UserWarning: Data has no ground-truth labels\n  warnings.warn(\"Data has no ground-truth labels\")\n\n\n\nvisualize_graph(data)\n\n\n\n\n\norder_ind = torch.argsort(data.y[:,1])\nvisualize_heatmap(data.edge_index, order_ind)"
  },
  {
    "objectID": "toy_graph_datasets.html",
    "href": "toy_graph_datasets.html",
    "title": "Toy Graph Datasets for FRED",
    "section": "",
    "text": "FRED is, at heart, an embedder of directed graphs. But what types of graphs? This notebook, and those nested under 01a01, contain a battery of toy directed graphs, including:\nThis notebook houses a sampling of these graphs, with details on how to call them and visualize them."
  },
  {
    "objectID": "toy_graph_datasets.html#graph-visualization-tools",
    "href": "toy_graph_datasets.html#graph-visualization-tools",
    "title": "Toy Graph Datasets for FRED",
    "section": "Graph Visualization Tools",
    "text": "Graph Visualization Tools\n\n\nvisualize_graph\n\n visualize_graph (data, is_networkx=False, to_undirected=False, ax=None)\n\n\nsource\n\n\nvisualize_heatmap\n\n visualize_heatmap (edge_index, order_ind=None, cmap='copper', ax=None)\n\n\nsource\n\n\ndisplay_gallery\n\n display_gallery (vizset, ncol=4)\n\n\nsource\n\n\ndisplay_graph_gallery\n\n display_graph_gallery (dataset, ncol=4)\n\n\nsource\n\n\ndisplay_heatmap_gallery\n\n display_heatmap_gallery (dataset, ncol=4)"
  },
  {
    "objectID": "toy_graph_datasets.html#add-source-and-sink-communities",
    "href": "toy_graph_datasets.html#add-source-and-sink-communities",
    "title": "Toy Graph Datasets for FRED",
    "section": "Add source and sink communities",
    "text": "Add source and sink communities\nIn a directed graph, a node is a source if it has in-degree of 0, and a node is a sink if it has out-degree of 0. These notions can be generalized into source communities and sink communities (by communities we simply mean a group of nodes in the directed graph). If we think of information on the directed graph as some mass diffusing through random walk, then mass will stay in the sink communities once enter and mass will stay out of the source communities once exit. Then, the existence of source and/or sink communities could imbalancedly affect the measurement of diffusion curvature.\nIn order to assess and possibly correct this effect, we first want to create directed graphs with source and/or sink communities. We will do so by create pretransformation to existing directed graph data so to make all edges connected to some ground-truth communities pointing outwards (for source communities) or inwards (for sink communities).\nWe will be flexible and add a parameter adv_prob to indicate the probability of edges pointing in the wrong direction. This probability should be zero or close to zero.\nThere are two possible way to correct the edges that point in the wrong direction: either by reversing the direction or by removing the edge completely. The probability of employing these methods is specified by the probability remove_prob. This parameter could help mitigate the effect of excessive number of edges pointing out of (into resp.) source (sink resp.) communities.\n\nsource\n\nSourceSink\n\n SourceSink (prob_source=0.1, prob_sink=0.1, adv_prob=0, remove_prob=0)\n\nTransform a (directed or undirected) graph into a directed graph with a proportion of the nodes with mostly out-edges and a porportion of the nodes with mostly in-edges\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprob_source\nfloat\n0.1\nmust be between 0 and 1Proportion of nodes/communities to turn into source nodes/communities(with mostly out-edges)\n\n\nprob_sink\nfloat\n0.1\nmust be between 0 and 1prob_source and prob_sink must add up to no more than 1Proportion of nodes/communities to turn into sink nodes/communities(with mostly in-edges)\n\n\nadv_prob\nint\n0\nmust be between 0 and 1Probability of in-edges for source nodes and/or out-edges for sink nodes\n\n\nremove_prob\nint\n0\nmust be between 0 and 1Probability of removing an in-edge for source nodes and/or out-edges for sink nodes1 - remove_prob is the probability of reversing the direction of in-edge for source nodes and/or out-edges for sink nodes\n\n\n\nIt is also possible to create source and sink nodes using the same SourceSink transformation to generate small directed graph with specific characteristic. We will try transforming the graph above into a big cluster of source and a smaller cluster of sinks\n\npre_transform = SourceSink(prob_source=0.6, prob_sink=0.4, adv_prob=0.1, remove_prob=0)\ndataset = SmallRandom(num_nodes=20, prob_edge=0.2, pre_transform=pre_transform)\ndata = dataset[0]\n\n/var/folders/y5/4qfj8yjj1hb97n6q01_dg0km0000gn/T/ipykernel_88073/2928479379.py:88: UserWarning: Data has no ground-truth labels\n  warnings.warn(\"Data has no ground-truth labels\")\n\n\n\nvisualize_graph(data)\n\n\n\n\n\norder_ind = torch.argsort(data.y[:,1])\nvisualize_heatmap(data.edge_index, order_ind)"
  }
]